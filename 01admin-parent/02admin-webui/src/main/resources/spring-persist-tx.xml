<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置自动扫描的包：主要是把Service扫描到容器中 -->
    <context:component-scan base-package="cn.hwali.ex.service"/>

    <!-- 配置事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务切面 -->
    <aop:config>
        <!-- 考虑到后面我们整合SpringSecurity，避免把UserDetailService加入事务，让切点表达式定位到ServiceImpl -->
        <aop:pointcut id="txPointcut" expression="execution(* *..*AdminServiceImpl.*(..))"/>

        <!-- 将切入点表达式和事务通知关联起来 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 配置事务通知 -->
    <!-- transaction-manager 属性用于引用事务管理器，如果事务管理器的bean的id 正好是 transactionManager，可以省略这个属性 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>

            <!--查询方法：配置只读属性，让数据库知道这是一个查询操作，能够进行一定优化-->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>

            <!--增删改方法：配置事务传播行为、回滚异常-->
            <!--
                Propagation属性：
                    REQUIRED:默认值，表示当前方法必须工作在事务中，如果当前线程上没有已经开启的事务，则自己开启事务 。如果已经有了，那么就使用这个已有的事务。
                    顾虑：用别人事务有可能“被”回滚。
                    REQUIRES_NEW 表示：当前方法必须运行在事务中，如果没有事务，则开启事务，在自己的事务中运行。和REQUIRED 的区别就是就算有了已开启的事务，也一定要开启自己的事务，避免和其他方法共用一个事务。
                    好处：不会受到其他事务回滚的影响。
                rollback-for属性：配置事务方法针对什么样的异常回滚
                    默认值：运行时异常回滚
                    建议值：编译时异常+运行时异常都回滚
            -->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
</beans>
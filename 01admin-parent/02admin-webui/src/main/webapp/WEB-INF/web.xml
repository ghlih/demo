<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 配置ContextLoaderListener加载Spring配置文件 -->
    <!-- needed for ContextLoaderListener -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <!-- Bootstraps the root web application context before servlet initialization -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 配置 CharacterEncodingFilter 解决POST请求的字符乱码问题 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 指定字符集 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>

        <!-- 强制请求进行编码 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>

        <!-- 强制响应进行编码 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- SpringSecurity使用的是过滤器Filter而不是拦截器Inteceptor，意味着SpringSecurity
    能够管理的不仅仅是SpringMVC中的handler请求，还包含Web应用中所有请求。比如：项目中的静态资源
     也会被拦截，从而进行权限控制
         注意：<filter-name>springSecurityFilterChain</filter-name> 标 签 中 必 须 是
springSecurityFilterChain。因为 springSecurityFilterChain 在 IOC 容器中对应真正执行权限
控制的二十几个 Filter，只有叫这个名字才能够加载到这些 Filter。
     -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 配置SpringMVC的前端控制器 -->
    <!-- The front controller of this Spring Web application,responsible for handing all application requests -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!-- 以初始化参数的形式指定SpringMVC配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>

        <!-- 让DispatcherServlet在Web应用启动时创建对象、初始化 -->
        <!-- 默认情况下：Servlet在第一次请求的时候进行创建对象、初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Map all requests to the DispatcherServlet for handing -->
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!-- DispatcherServlet 映射的URL地址 -->
        <!-- 大白话：什么样的访问地址会交给SpringMVC来处理 -->
        <!-- 配置方式一：符合RESTFUL风格“/” -->
        <!--        <url-pattern>/</url-pattern>-->

        <!-- 配置方式二：请求扩展名 -->
        <!-- *.html扩展名 是伪静态，表面上看起来是一个访问静态资源的请求，但实际上
        是由SpringMVC交给handler来处理的动态资源。
             好处一：有利于SEO优化
                    让搜索引擎更容易找到我们的网站，有利于网站的推广
             好处二：隐藏后端技术实现细节
                    给黑客入侵系统增加难度
             好处三：自动解决静态资源访问问题
                    访问a.png本身不符合*.html这个url-pattern，
                   和SpringMVC完全没有关系，当前请求由Tomcat处理。
                   如果url-pattern映射了“/”，那么SpringMVC中还需要配置DefaultServletHandler。
             缺陷：不符合RESTFUL风格

             *.json扩展名
                描述问题：请求扩展名 http://localhost:8080/../ajax.html
                         服务气端打算返回的数据：JSON格式，两者不匹配
                分析问题：请求扩展名和响应体的数据格式不匹配！！！
                解决问题：让请求扩展名和预计的响应体数据格式一致。
                         http://localhost:8080/../ajax.json
                         同时让SpringMVC在映射*.html扩展名之外再映射*.json扩展名，
                         不然会返回404
        -->
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

</web-app>